"""
Shows how to generate an image from a text prompt with the Amazon Titan Image Generator G1 model (on demand).
"""
import base64
import io
import json
import logging
import boto3
import os

from botocore.exceptions import ClientError
import datetime

# Initialize bedrock client once for better performance
bedrock_client = boto3.client(service_name='bedrock-runtime')

class ImageError(Exception):
    "Custom exception for errors returned by Amazon Titan Image Generator G1"

    def __init__(self, message):
        self.message = message


logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


def generate_image(model_id, body):
    """
    Generate an image using Amazon Titan Image Generator G1 model on demand.
    Args:
        model_id (str): The model ID to use.
        body (str) : The request body to use.
    Returns:
        image_bytes (bytes): The image generated by the model.
    """

    logger.info(
        "Generating image with Amazon Titan Image Generator G1 model %s", model_id)

    accept = "application/json"
    content_type = "application/json"

    try:
        response = bedrock_client.invoke_model(
            body=body, modelId=model_id, accept=accept, contentType=content_type
        )
        response_body = json.loads(response.get("body").read())

        # Improved error handling for response parsing
        if "images" not in response_body or not response_body["images"]:
            raise ImageError("No images returned in response")
            
        base64_image = response_body["images"][0]
        base64_bytes = base64_image.encode('ascii')
        image_bytes = base64.b64decode(base64_bytes)

        finish_reason = response_body.get("error")
        if finish_reason is not None:
            raise ImageError(f"Image generation error. Error is {finish_reason}")

        logger.info(
            "Successfully generated image with Amazon Titan Image Generator G1 model %s", model_id)

        return image_bytes
        
    except json.JSONDecodeError as e:
        raise ImageError(f"Failed to parse response: {str(e)}")
    except (KeyError, IndexError) as e:
        raise ImageError(f"Invalid response format: {str(e)}")


def generate_image_from_prompt(prompt):
    """
    Simplified function to generate image from text prompt for frontend use.
    Args:
        prompt (str): Text description of the image to generate.
    Returns:
        bytes: The generated image as bytes.
    """
    model_id = 'amazon.titan-image-generator-v1'
    
    body = json.dumps({
        "taskType": "TEXT_IMAGE",
        "textToImageParams": {
            "text": prompt
        },
        "imageGenerationConfig": {
            "numberOfImages": 1,
            "height": 1024,
            "width": 1024,
            "cfgScale": 8.0,
            "seed": 0
        }
    })
    
    try:
        return generate_image(model_id=model_id, body=body)
    except Exception as e:
        logger.error(f"Error generating image: {str(e)}")
        raise


def index(event, context):
    """
    Entrypoint for Amazon Titan Image Generator G1 example.
    """

    logging.basicConfig(level=logging.INFO,
                        format="%(levelname)s: %(message)s")

    model_id = 'amazon.titan-image-generator-v1'

    prompt = event['prompt']

    body = json.dumps({
        "taskType": "TEXT_IMAGE",
        "textToImageParams": {
            "text": prompt
        },
        "imageGenerationConfig": {
            "numberOfImages": 1,
            "height": 1024,
            "width": 1024,
            "cfgScale": 8.0,
            "seed": 0
        }
    })

    try:
        image_bytes = generate_image(model_id=model_id, body=body)
        print("Image generated successfully.")
        
        return {
            'statusCode': 200,
            'body': image_bytes
        }

    except ClientError as err:
        message = err.response["Error"]["Message"]
        logger.error("A client error occurred: %s", message)
        return {
            'statusCode': 400,
            'body': json.dumps({'error': f'Client error: {message}'})
        }
    except ImageError as err:
        logger.error(err.message)
        return {
            'statusCode': 500,
            'body': json.dumps({'error': f'Image generation error: {err.message}'})
        }