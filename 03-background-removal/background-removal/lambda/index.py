"""
Shows how to generate an image with background removal with the
Amazon Titan Image Generator G1 V2 model (on demand).
"""
import base64
import io
import json
import logging
import boto3
import os
from datetime import datetime

from botocore.exceptions import ClientError


class ImageError(Exception):
    "Custom exception for errors returned by Amazon Titan Image Generator V2"

    def __init__(self, message):
        self.message = message


logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

def download_image_from_s3(bucket_name, object_key, s3_client=None):
    """
    Download an image from S3 and return it as base64 string.
    
    Args:
        bucket_name (str): The S3 bucket name
        object_key (str): The S3 object key (file path)
        s3_client: Optional S3 client (will create one if not provided)
    
    Returns:
        str: Base64 encoded image data
    """
    if s3_client is None:
        s3_client = boto3.client('s3')
    
    try:
        logger.info(f"Downloading image from S3: s3://{bucket_name}/{object_key}")
        
        # Download the file from S3
        response = s3_client.get_object(Bucket=bucket_name, Key=object_key)
        image_bytes = response['Body'].read()
        
        # Convert to base64
        base64_image = base64.b64encode(image_bytes).decode('utf-8')
        
        logger.info(f"Successfully downloaded image from S3, size: {len(image_bytes)} bytes")
        return base64_image
        
    except ClientError as e:
        error_code = e.response['Error']['Code']
        if error_code == 'NoSuchBucket':
            raise ImageError(f"S3 bucket '{bucket_name}' does not exist")
        elif error_code == 'NoSuchKey':
            raise ImageError(f"S3 object '{object_key}' does not exist in bucket '{bucket_name}'")
        elif error_code == 'AccessDenied':
            raise ImageError(f"Access denied to S3 object s3://{bucket_name}/{object_key}")
        else:
            raise ImageError(f"Error downloading from S3: {e}")
    except Exception as e:
        raise ImageError(f"Unexpected error downloading from S3: {str(e)}")

def generate_image(model_id, body):
    """
    Generate an image using Amazon Titan Image Generator V2 model on demand.
    Args:
        model_id (str): The model ID to use.
        body (str) : The request body to use.
    Returns:
        image_bytes (bytes): The image generated by the model.
    """

    logger.info(
        "Generating image with Amazon Titan Image Generator V2 model %s", model_id)

    bedrock = boto3.client(service_name='bedrock-runtime')

    accept = "application/json"
    content_type = "application/json"

    response = bedrock.invoke_model(
        body=body, modelId=model_id, accept=accept, contentType=content_type
    )
    response_body = json.loads(response.get("body").read())

    base64_image = response_body.get("images")[0]
    base64_bytes = base64_image.encode('ascii')
    image_bytes = base64.b64decode(base64_bytes)

    finish_reason = response_body.get("error")

    if finish_reason is not None:
        raise ImageError(f"Image generation error. Error is {finish_reason}")

    logger.info(
        "Successfully generated image with Amazon Titan Image Generator V2 model %s", model_id)

    return image_bytes


def index(event, context):
    """
    Entrypoint for Amazon Titan Image Generator V2 example.
    """
    try:
        logging.basicConfig(level=logging.INFO,
                            format="%(levelname)s: %(message)s")

        model_id = 'amazon.titan-image-generator-v2:0'
        s3_client = boto3.client('s3')

        # Get bucket name from environment variable
        bucket_name = os.environ.get('S3_BUCKET_NAME')
        if not bucket_name:
            raise ValueError("S3_BUCKET_NAME environment variable is required")
        
        # Get input key from payload
        input_key = event['input_key']
        if not input_key:
            raise ValueError("Missing required parameter: input_key")

        # Generate output key (always save to outputs/ folder)
        filename = os.path.basename(input_key)
        name, ext = os.path.splitext(filename)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_key = f"outputs/{name}_bg_removed_{timestamp}.png"

        logger.info(f"Processing: s3://{bucket_name}/{input_key} -> s3://{bucket_name}/{output_key}")

        # Download image from S3
        input_image = download_image_from_s3(bucket_name, input_key, s3_client)

        body = json.dumps({
            "taskType": "BACKGROUND_REMOVAL",
            "backgroundRemovalParams": {
                "image": input_image,
            }
        })

        image_bytes = generate_image(model_id=model_id,
                                     body=body)
    
        response_s3=s3_client.put_object(
            Bucket=bucket_name,
            Body=image_bytes,
            Key=output_key)

        generate_presigned_url = s3_client.generate_presigned_url(
                'get_object', 
                Params={
                        'Bucket':bucket_name,
                        'Key':output_key
                    },
                ExpiresIn=3600
            )
        print(generate_presigned_url)
        return {
            'statusCode': 200,
            'body': generate_presigned_url
        }

    except ClientError as err:
        message = err.response["Error"]["Message"]
        logger.error("A client error occurred: %s", message)
        print("A client error occured: " +
              format(message))
    except ImageError as err:
        logger.error(err.message)
        print(err.message)

    else:
        print(
            f"Finished generating image with Amazon Titan Image Generator V2 model {model_id}.")